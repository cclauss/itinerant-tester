# https://github.com/actions/virtual-environments/tree/main/images/macos

name: macOS
on:
  workflow_dispatch:
jobs:
  macOS:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-15, macos-14, macos-13, macos-latest]
        # arch: [ARM64, X64]  # macos-13 is X64, others are ARM64
    runs-on: ${{ matrix.os }}
    steps:
    - name: ${{ runner.os }} (${{ matrix.os }}) on ${{ runner.arch }}
      run: echo "${{ runner.os }} (${{ matrix.os }}) on ${{ runner.arch }}"
    - uses: actions/checkout@v5
    - uses: actions/setup-python@v5
      with:
        python-version: 3.x
    - run: sw_vers && uname -a && system_profiler SPSoftwareDataType SPHardwareDataType
    - name: Create macOS_CPUs.md
      run: |
        echo "| macOS Version | runner.arch |" > macOS_CPUs.md
        echo "|--------------|-------------|" >> macOS_CPUs.md
        echo "| ${{ matrix.os }} | ${{ runner.arch }} |" >> macOS_CPUs.md
    - name: Display macOS_CPUs.md content
      run: cat macOS_CPUs.md
    - name: Upload macOS_CPUs.md artifact
      uses: actions/upload-artifact@v4
      with:
        name: macOS_CPUs-${{ matrix.os }}
        path: macOS_CPUs.md
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      run: echo "$JOB_CONTEXT"
    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      run: echo "$STEPS_CONTEXT"
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT"
    - name: Dump strategy context
      env:
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      run: echo "$STRATEGY_CONTEXT"
    - name: Dump matrix context
      env:
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      run: echo "$MATRIX_CONTEXT"
  pythons_on_macOS_12:
    runs-on: macos-12
    steps:
    - uses: actions/checkout@v5
    - uses: actions/setup-python@v5
      with:
        python-version: |
          3.12
          3.11
          3.10
          3.9
          3.8
          3.7
    - run: |
        python3.7 --version
        python3.8 --version
        python3.9 --version
        python3.10 --version
        python3.11 --version
        python3.12 --version
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT"
  pythons_on_macOS_11:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v5
    - uses: actions/setup-python@v5
      with:
        python-version: |
          3.6
          # 3.5
#          3.4
#          3.3
#          3.2
#          3.1
#          3.0
    - run: |
        python3.0 --version || true
        python3.1 --version || true
        python3.2 --version || true
        python3.3 --version || true
        python3.4 --version || true
        python3.5 --version || true
        python3.6 --version || true
        python3.7 --version || true
        python3.8 --version || true
        python3.9 --version || true
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT"
  write_macOS_CPUs_md:
    needs: macOS
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    - name: Download all macOS_CPUs artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: macOS_CPUs-*
        merge-multiple: true
        path: artifacts
    - name: Process and merge macOS_CPUs files
      shell: python
      run: |
        import os
        import glob
        from pathlib import Path
        
        # Find all macOS_CPUs.md files in artifacts directory
        artifact_files = glob.glob("artifacts/**/macOS_CPUs.md", recursive=True)
        print(f"Found artifact files: {artifact_files}")
        
        # Read all content and collect unique rows
        all_rows = set()
        header = "| macOS Version | runner.arch |"
        separator = "|--------------|-------------|"
        
        for file_path in artifact_files:
            with open(file_path, 'r') as f:
                content = f.read().strip()
                lines = content.split('\n')
                # Skip header and separator lines, collect data rows
                for line in lines:
                    line = line.strip()
                    if line and line != header and line != separator:
                        all_rows.add(line)
        
        # Sort rows for consistent output
        sorted_rows = sorted(list(all_rows))
        
        # Create combined content
        combined_content = f"{header}\n{separator}\n"
        if sorted_rows:
            combined_content += "\n".join(sorted_rows) + "\n"
        
        # Write combined file
        with open("macOS_CPUs_combined.md", 'w') as f:
            f.write(combined_content)
        
        print(f"Combined content:\n{combined_content}")
        
        # Read existing file for comparison
        existing_content = ""
        if os.path.exists("macOS_CPUs.md"):
            with open("macOS_CPUs.md", 'r') as f:
                existing_content = f.read()
        
        print(f"Existing content:\n{existing_content}")
        
        # Compare and update if different
        if combined_content.strip() != existing_content.strip():
            print("Contents differ, updating macOS_CPUs.md")
            with open("macOS_CPUs.md", 'w') as f:
                f.write(combined_content)
        else:
            print("Contents are the same, no update needed")
    - name: Upload combined macOS_CPUs.md
      uses: actions/upload-artifact@v4
      with:
        name: macOS_CPUs_final
        path: |
          macOS_CPUs.md
          macOS_CPUs_combined.md
