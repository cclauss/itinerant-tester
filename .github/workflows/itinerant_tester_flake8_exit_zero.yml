name: itinerant_tester_flake8_exit_zero
on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Repo to test (user_name/repo_name)'
        required: true

jobs:
  itinerant_tester_flake8_exit_zero:
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']  # [3.7, 3.8, 3.9, "3.10", 3.11-dev, pypy3]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Testing ${{ github.event.inputs.repo }}..."
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install --upgrade pip wheel
      - run: pip install bandit black codespell flake8 flake8-2020 flake8-bugbear
                         flake8-comprehensions flake8-return isort mypy pytest pytype
                         pyupgrade safety
      
      - run: bandit --recursive . | tee bandit.out.txt || true
      - name: Customized bandit command
        shell: python
        run: |
          with open("bandit.out.txt") as in_file:
              errors = sorted(
                  set(line[11:15] for line in in_file if line.startswith(">> "))
              )
          skip = f" --skip {','.join(errors)}" if errors else ""
          print(f"bandit --recursive{skip} .")
      - run: |
          black --check . || true
          rm bandit.out.txt
      - run: codespell --count --skip="*.po" || true  # --ignore-words-list="" --skip="*.css,*.js,*.lock,*.map,*.po,*.svg"
      - run: flake8 . --count --exit-zero --select=E9,F63,F7,F82,Y --show-source --statistics
      - run: flake8 . --count --exit-zero --max-line-length=88 --show-source --statistics
      - run: isort --profile black . || true
      # The next two commands need to 'cd repo_name' to work correctly
      - name: pip install -r requirements.txt || pip install --editable . || pip install . || true
        run: pip install -r requirements.txt || pip install --editable . || true
      - name: mypy --ignore-missing-imports --install-types --non-interactive . || true
        run: |
          mkdir -p .mypy_cache
          mypy --ignore-missing-imports --install-types --non-interactive . || true
      - run: pytest --doctest-modules . || pytest . || true
      - run: shopt -s globstar && pyupgrade --exit-zero-even-if-changed --py37-plus **/*.py
      - run: safety check
      - shell: python
        run: |
          from subprocess import run  # Requires Python >= 3.7
          from typing import Tuple

          flake8_out: Tuple[str] = tuple(run(
              ["flake8", "--ignore=AA", "--isolated", "--max-complexity=1", "."],
              capture_output=True,
              text=True
          ).stdout.splitlines())


          def get_max_complexity(flake8_out: Tuple[str] = flake8_out) -> int:
              C901_TAG = " is too complex ("
              c901_lines = [line for line in flake8_out if "C901" in line and C901_TAG in line]
              return max(int(line.split(C901_TAG)[-1].split(")")[0]) for line in c901_lines)


          def get_max_line_length(flake8_out: Tuple[str] = flake8_out) -> int:
              E501_TAG = ": E501 line too long ("
              e501_lines = [line for line in flake8_out if E501_TAG in line]
              return max(int(line.split(E501_TAG)[-1].split()[0]) for line in e501_lines)


          violations = set(line.split()[1] for line in flake8_out)

          try:
              violations.remove("C901")
              max_complexity = f"--max-complexity={max(get_max_complexity(), 10)} "
          except KeyError:
              max_complexity = ""

          try:
              violations.remove("E501")
              max_line_length = f"--max-line-length={max(get_max_line_length(), 88)} "
          except KeyError:
              max_line_length = ""

          ignore = f"--ignore={','.join(sorted(violations))} " if violations else ""
          flake8_cmd = (f"flake8 {ignore}{max_complexity}{max_line_length}--show-source --statistics .")
          print(flake8_cmd)
          print("=" * 80)
          run(flake8_cmd.split(), text=True)
